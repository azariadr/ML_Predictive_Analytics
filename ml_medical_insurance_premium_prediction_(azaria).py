# -*- coding: utf-8 -*-
"""ML Medical Insurance Premium Prediction (Azaria)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15ibFTBM1FqARr3qPFbys016xRUNfTVPv

# Import Library

Sel ini berisi semua library yang dibutuhkan untuk proyek ini. Library yang diimport adalah:
- `numpy`: untuk operasi numerik dan array.
- `matplotlib.pyplot`: untuk membuat visualisasi statis, interaktif, dan animasi.
- `pandas`: untuk manipulasi dan analisis data.
- `seaborn`: untuk membuat visualisasi statistik yang informatif dan menarik.
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""# Upload Dataset

Sel ini digunakan untuk mengupload dataset dari komputer lokal ke Google Colab.
"""

from google.colab import files
files.upload()

"""# Download Dataset dari Kaggle

Sel ini digunakan untuk mendownload dataset dari Kaggle menggunakan Kaggle API.
"""

!kaggle datasets download -d tejashvi14/medical-insurance-premium-prediction

"""# Ekstrak Dataset

Sel ini digunakan untuk mengekstrak file zip yang telah didownload dari Kaggle.
"""

!unzip medical-insurance-premium-prediction.zip

"""# Membaca Dataset

Sel ini digunakan untuk membaca dataset dari file CSV ke dalam Pandas DataFrame.
"""

df = pd.read_csv('/content/Medicalpremium.csv')
df.head(10)

"""# Menampilkan Bentuk Dataset

Sel ini digunakan untuk menampilkan bentuk dataset, yaitu jumlah baris dan kolom.
"""

df.shape

"""# Menampilkan Informasi Dataset

Sel ini digunakan untuk menampilkan informasi tentang dataset, seperti tipe data, jumlah nilai non-null, dan penggunaan memori.
"""

df.info()

"""# Menampilkan Statistik Deskriptif

Sel ini digunakan untuk menampilkan statistik deskriptif dari dataset, seperti mean, standar deviasi, nilai minimum, nilai maksimum, dan kuartil.
"""

df.describe()

"""# Visualisasi Outlier

Sel ini digunakan untuk membuat boxplot untuk kolom 'Weight' dan 'NumberOfMajorSurgeries' untuk memvisualisasikan outlier.
"""

sns.boxplot(x=df['Weight'])

sns.boxplot(x=df['NumberOfMajorSurgeries'])

"""# Mengatasi Outlier

Sel ini digunakan untuk mengatasi outlier menggunakan Z-score. Data yang memiliki Z-score lebih besar dari 3 akan dihapus.
"""

from scipy import stats
z = np.abs(stats.zscore(df['Weight']))
insurance = df[(z < 3)]

"""# Menampilkan Bentuk Dataset Setelah Mengatasi Outlier

Sel ini digunakan untuk menampilkan bentuk dataset setelah outlier diatasi.
"""

insurance.shape

"""# Memisahkan Fitur Kategorikal dan Numerikal

Sel ini digunakan untuk memisahkan fitur kategorikal dan numerikal ke dalam list yang berbeda.
"""

cat_features = ['Diabetes', 'BloodPressureProblems', 'AnyTransplants', 'AnyChronicDiseases', 'KnownAllergies', 'HistoryOfCancerInFamily']
num_features = ['Age', 'Height', 'Weight', 'NumberOfMajorSurgeries', 'PremiumPrice']

"""# Visualisasi Fitur Kategorikal

Sel ini digunakan untuk membuat bar plot untuk setiap fitur kategorikal untuk melihat distribusinya.
"""

plt.subplots(2, 2, figsize=(20, 16))

for i, col in enumerate(cat_features):
  plt.subplot(2, 3, i + 1)
  df.groupby(col).size().plot(kind='bar', rot=0)

"""# Visualisasi Fitur Numerikal

Sel ini digunakan untuk membuat histogram untuk setiap fitur numerikal untuk melihat distribusinya.
"""

df[num_features].hist(bins=50, figsize=(20, 15))
plt.show()

"""# Visualisasi Hubungan PremiumPrice dengan fitur kategorikal

Sel ini digunakan untuk membuat bar plot untuk melihat hubungan antara fitur kategorikal dengan 'PremiumPrice'.
"""

num_plots = len(cat_features)
num_cols = 3  # Jumlah kolom subplot
num_rows = (num_plots + num_cols - 1) // num_cols  # Jumlah baris subplot, dihitung agar pas

fig, axes = plt.subplots(num_rows, num_cols, figsize=(20, 15))
fig.suptitle("Hubungan PremiumPrice dengan Fitur Kategorikal", fontsize=16)

axes = axes.flatten()

for i, col in enumerate(cat_features):
    sns.barplot(x=col, y="PremiumPrice", data=df, palette="Set3", ax=axes[i])
    axes[i].set_title(f"Hubungan antara {col} dan PremiumPrice")

plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Sesuaikan tata letak agar judul tidak terpotong
plt.show()

"""# Visualisasi Korelasi Antar Fitur

Sel ini digunakan untuk membuat pair plot untuk melihat hubungan antar fitur.
"""

sns.pairplot(df, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = df.corr().round(2)

"""Sel ini digunakan untuk membuat heatmap untuk memvisualisasikan korelasi antara fitur-fitur dalam dataset."""

sns.heatmap(data=correlation_matrix, annot=True, cmap='PiYG' )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""# One-Hot Encoding

Sel ini digunakan untuk melakukan one-hot encoding pada fitur-fitur kategorikal.
"""

data_cat =  pd.get_dummies(df[['Diabetes', 'BloodPressureProblems', 'AnyTransplants', 'AnyChronicDiseases', 'KnownAllergies', 'HistoryOfCancerInFamily']])
data_cat

"""# Menggabungkan Data Kategorikal yang Telah Diencoding

Sel ini digunakan untuk menggabungkan data kategorikal yang telah di-encode dengan data numerikal.
"""

df = pd.concat([df,data_cat],axis=1)

"""# Menghapus Fitur Kategorikal Awal

Sel ini digunakan untuk menghapus fitur kategorikal awal yang belum di-encode.
"""

df.drop(columns=['Diabetes', 'BloodPressureProblems', 'AnyTransplants', 'AnyChronicDiseases', 'KnownAllergies', 'HistoryOfCancerInFamily'],inplace=True)

"""# Memisahkan Data Menjadi Data Training dan Data Testing

Sel ini digunakan untuk memisahkan data menjadi data training dan data testing menggunakan `train_test_split`.
"""

from sklearn.model_selection import train_test_split

X = df.drop(['PremiumPrice'],axis =1)
y = df['PremiumPrice']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

print(f'Total # of sample in whole dataset: {len(y)}')
print(f'Total # of sample in train dataset: {len(y_train)}')
print(f'Total # of sample in test dataset: {len(y_test)}')

"""# Scaling Fitur Numerik

Sel ini digunakan untuk melakukan scaling pada fitur numerik menggunakan `StandardScaler`.
"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train[['Age', 'Height', 'Weight']] = scaler.fit_transform(X_train[['Age', 'Height', 'Weight']])
X_test[['Age', 'Height', 'Weight']] = scaler.transform(X_test[['Age', 'Height', 'Weight']])

"""# Membuat DataFrame untuk Menyimpan Hasil

Sel ini digunakan untuk membuat DataFrame kosong untuk menyimpan hasil evaluasi model.
"""

result = pd.DataFrame(index=['train_mse', 'test_mse','eval_train','eval_test'],
                      columns=['Huber', 'SVR'])

"""# Import Library untuk Model dan Evaluasi

Sel ini digunakan untuk mengimport library yang dibutuhkan untuk model HuberRegressor, SVR, dan metrik evaluasi mean_squared_error.
"""

from sklearn.linear_model import HuberRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

"""# Training Model HuberRegressor

Sel ini digunakan untuk melatih model HuberRegressor dan menghitung MSE pada data training.
"""

hr = HuberRegressor()
hr.fit(X_train, y_train)

result.loc['train_mse','Huber'] = mean_squared_error(y_pred = hr.predict(X_train), y_true=y_train)

"""# Training Model SVR

Sel ini digunakan untuk melatih model SVR dan menghitung MSE pada data training.
"""

svr = SVR()
svr.fit(X_train, y_train)

result.loc['train_mse','SVR'] = mean_squared_error(y_pred = svr.predict(X_train), y_true=y_train)

"""# Evaluasi Model pada Data Testing

Sel ini digunakan untuk melakukan prediksi pada data testing dan menghitung MSE untuk model HuberRegressor dan SVR.
"""

result.loc['test_mse','Huber'] = mean_squared_error(y_pred = hr.predict(X_test), y_true=y_test)
result.loc['test_mse','SVR'] = mean_squared_error(y_pred = svr.predict(X_test), y_true=y_test)

result

"""# Visualisasi Hasil Evaluasi

Sel ini digunakan untuk memvisualisasikan hasil evaluasi model dalam bentuk bar plot.
"""

result.plot(kind='bar')

"""# Hyperparameter Tuning menggunakan Grid Search untuk HuberRegressor

Sel ini digunakan untuk melakukan hyperparameter tuning pada model HuberRegressor menggunakan Grid Search dan menghitung MSE pada data training dan testing.
"""

from sklearn.model_selection import GridSearchCV

hr_eval = HuberRegressor()
param_grid = { #Setup Params
    'epsilon': [1.0, 1.5, 2.0],
    'alpha': [0.0001, 0.001, 0.01],
    'max_iter': [100, 200, 300]
}

grid_search_huber = GridSearchCV(hr_eval, param_grid, scoring='neg_mean_squared_error', cv=5)

"""# Training Model HuberRegressor dengan Hyperparameter Terbaik

Sel ini digunakan untuk melatih model HuberRegressor dengan hyperparameter terbaik yang ditemukan oleh Grid Search.
"""

grid_search_huber.fit(X_train, y_train)

print("Best hyperparameters:", grid_search_huber.best_params_)
print("Best Score:", grid_search_huber.best_score_)

"""# Evaluasi Model HuberRegressor dengan Hyperparameter Terbaik

Sel ini digunakan untuk melakukan prediksi pada data testing dan menghitung MSE untuk model HuberRegressor dengan hyperparameter terbaik.
"""

result.loc['eval_train','Huber'] = mean_squared_error(y_pred = grid_search_huber.predict(X_train), y_true=y_train)
result.loc['eval_test','Huber'] = mean_squared_error(y_pred = grid_search_huber.predict(X_test), y_true=y_test)

"""# Hyperparameter Tuning menggunakan Grid Search untuk SVR

Sel ini digunakan untuk melakukan hyperparameter tuning pada model SVR menggunakan Grid Search.
"""

svr_eval = SVR()
param_grid_svr = { #Setup Params
    'kernel': ['linear', 'rbf'],
    'C': [0.1, 1, 10],
    'epsilon': [0.1, 0.2, 0.3]
}

"""# Training Model SVR dengan Hyperparameter Terbaik

Sel ini digunakan untuk melatih model SVR dengan hyperparameter terbaik yang ditemukan oleh Grid Search.
"""

grid_search_svr = GridSearchCV(svr_eval, param_grid_svr, scoring='neg_mean_squared_error', cv=5)
grid_search_svr.fit(X_train, y_train)

print("Best hyperparameters:", grid_search_svr.best_params_)
print("Best Score:", grid_search_svr.best_score_)

"""# Evaluasi Model SVR dengan Hyperparameter Terbaik

Sel ini digunakan untuk melakukan prediksi pada data testing dan menghitung MSE untuk model SVR dengan hyperparameter terbaik.
"""

result.loc['eval_train','SVR'] = mean_squared_error(y_pred = grid_search_svr.predict(X_train), y_true=y_train)
result.loc['eval_test','SVR'] = mean_squared_error(y_pred = grid_search_svr.predict(X_test), y_true=y_test)

result

"""# Visualisasi Hasil Evaluasi Akhir

Sel ini digunakan untuk memvisualisasikan hasil evaluasi akhir model dalam bentuk bar plot.
"""

result.plot(kind='bar')